"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _core = require("@emotion/core");

var _reactSplitPane = _interopRequireDefault(require("react-split-pane"));

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _reactScrollSync = require("react-scroll-sync");

var _EditorControlPane = _interopRequireDefault(require("./EditorControlPane/EditorControlPane"));

var _EditorPreviewPane = _interopRequireDefault(require("./EditorPreviewPane/EditorPreviewPane"));

var _EditorToolbar = _interopRequireDefault(require("./EditorToolbar"));

var _i18n = require("../../lib/i18n");

var _collectionTypes = require("../../constants/collectionTypes");

var _collections = require("../../reducers/collections");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const PREVIEW_VISIBLE = 'cms.preview-visible';
const SCROLL_SYNC_ENABLED = 'cms.scroll-sync-enabled';
const SPLIT_PANE_POSITION = 'cms.split-pane-position';
const I18N_VISIBLE = 'cms.i18n-visible';
const styles = {
  splitPane: /*#__PURE__*/(0, _core.css)(_netlifyCmsUiDefault.components.card, ";border-radius:0;height:100%;;label:splitPane;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  pane: process.env.NODE_ENV === "production" ? {
    name: "nq3sgi-pane",
    styles: "height:100%;overflow-y:auto;;label:pane;"
  } : {
    name: "nq3sgi-pane",
    styles: "height:100%;overflow-y:auto;;label:pane;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  }
};
const EditorToggle = ( /*#__PURE__*/0, _styledBase.default)(_netlifyCmsUiDefault.IconButton, {
  target: "e1pxf6c40",
  label: "EditorToggle"
})(process.env.NODE_ENV === "production" ? {
  name: "1upilqn",
  styles: "margin-bottom:12px;"
} : {
  name: "1upilqn",
  styles: "margin-bottom:12px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

const ReactSplitPaneGlobalStyles = () => (0, _core.jsx)(_core.Global, {
  styles: /*#__PURE__*/(0, _core.css)(".Resizer.vertical{width:21px;cursor:col-resize;position:relative;transition:background-color ", _netlifyCmsUiDefault.transitions.main, ";&:before{content:'';width:2px;height:100%;position:relative;left:10px;background-color:", _netlifyCmsUiDefault.colors.textFieldBorder, ";display:block;}&:hover,&:active{background-color:", _netlifyCmsUiDefault.colorsRaw.GrayLight, ";}};label:ReactSplitPaneGlobalStyles;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
});

const StyledSplitPane = ( /*#__PURE__*/0, _styledBase.default)(_reactSplitPane.default, {
  target: "e1pxf6c41",
  label: "StyledSplitPane"
})(styles.splitPane, ";.Pane{height:100%;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JJbnRlcmZhY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdUV5QyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9FZGl0b3IvRWRpdG9ySW50ZXJmYWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHsgY3NzLCBHbG9iYWwgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCBTcGxpdFBhbmUgZnJvbSAncmVhY3Qtc3BsaXQtcGFuZSc7XG5pbXBvcnQge1xuICBjb2xvcnMsXG4gIGNvbG9yc1JhdyxcbiAgY29tcG9uZW50cyxcbiAgdHJhbnNpdGlvbnMsXG4gIEljb25CdXR0b24sXG4gIHpJbmRleCxcbn0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBTY3JvbGxTeW5jLCBTY3JvbGxTeW5jUGFuZSB9IGZyb20gJ3JlYWN0LXNjcm9sbC1zeW5jJztcbmltcG9ydCBFZGl0b3JDb250cm9sUGFuZSBmcm9tICcuL0VkaXRvckNvbnRyb2xQYW5lL0VkaXRvckNvbnRyb2xQYW5lJztcbmltcG9ydCBFZGl0b3JQcmV2aWV3UGFuZSBmcm9tICcuL0VkaXRvclByZXZpZXdQYW5lL0VkaXRvclByZXZpZXdQYW5lJztcbmltcG9ydCBFZGl0b3JUb29sYmFyIGZyb20gJy4vRWRpdG9yVG9vbGJhcic7XG5pbXBvcnQgeyBoYXNJMThuLCBnZXRJMThuSW5mbywgZ2V0UHJldmlld0VudHJ5IH0gZnJvbSAnLi4vLi4vbGliL2kxOG4nO1xuaW1wb3J0IHsgRklMRVMgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvY29sbGVjdGlvblR5cGVzJztcbmltcG9ydCB7IGdldEZpbGVGcm9tU2x1ZyB9IGZyb20gJy4uLy4uL3JlZHVjZXJzL2NvbGxlY3Rpb25zJztcblxuY29uc3QgUFJFVklFV19WSVNJQkxFID0gJ2Ntcy5wcmV2aWV3LXZpc2libGUnO1xuY29uc3QgU0NST0xMX1NZTkNfRU5BQkxFRCA9ICdjbXMuc2Nyb2xsLXN5bmMtZW5hYmxlZCc7XG5jb25zdCBTUExJVF9QQU5FX1BPU0lUSU9OID0gJ2Ntcy5zcGxpdC1wYW5lLXBvc2l0aW9uJztcbmNvbnN0IEkxOE5fVklTSUJMRSA9ICdjbXMuaTE4bi12aXNpYmxlJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBzcGxpdFBhbmU6IGNzc2BcbiAgICAke2NvbXBvbmVudHMuY2FyZH07XG4gICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gIGAsXG4gIHBhbmU6IGNzc2BcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgb3ZlcmZsb3cteTogYXV0bztcbiAgYCxcbn07XG5cbmNvbnN0IEVkaXRvclRvZ2dsZSA9IHN0eWxlZChJY29uQnV0dG9uKWBcbiAgbWFyZ2luLWJvdHRvbTogMTJweDtcbmA7XG5cbmNvbnN0IFJlYWN0U3BsaXRQYW5lR2xvYmFsU3R5bGVzID0gKCkgPT4gKFxuICA8R2xvYmFsXG4gICAgc3R5bGVzPXtjc3NgXG4gICAgICAuUmVzaXplci52ZXJ0aWNhbCB7XG4gICAgICAgIHdpZHRoOiAyMXB4O1xuICAgICAgICBjdXJzb3I6IGNvbC1yZXNpemU7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAke3RyYW5zaXRpb25zLm1haW59O1xuXG4gICAgICAgICY6YmVmb3JlIHtcbiAgICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgICB3aWR0aDogMnB4O1xuICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgbGVmdDogMTBweDtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICB9XG5cbiAgICAgICAgJjpob3ZlcixcbiAgICAgICAgJjphY3RpdmUge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzUmF3LkdyYXlMaWdodH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBgfVxuICAvPlxuKTtcblxuY29uc3QgU3R5bGVkU3BsaXRQYW5lID0gc3R5bGVkKFNwbGl0UGFuZSlgXG4gICR7c3R5bGVzLnNwbGl0UGFuZX07XG5cbiAgLyoqXG4gICAqIFF1aWNrIGZpeCBmb3IgcHJldmlldyBwYW5lIG5vdCBmdWxseSBkaXNwbGF5aW5nIGluIFNhZmFyaVxuICAgKi9cbiAgLlBhbmUge1xuICAgIGhlaWdodDogMTAwJTtcbiAgfVxuYDtcblxuY29uc3QgTm9QcmV2aWV3Q29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgJHtzdHlsZXMuc3BsaXRQYW5lfTtcbmA7XG5cbmNvbnN0IEVkaXRvckNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiAxMDAlO1xuICBtaW4td2lkdGg6IDgwMHB4O1xuICBoZWlnaHQ6IDEwMCU7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBwYWRkaW5nLXRvcDogNjZweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuYmFja2dyb3VuZH07XG5gO1xuXG5jb25zdCBFZGl0b3IgPSBzdHlsZWQuZGl2YFxuICBoZWlnaHQ6IDEwMCU7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5gO1xuXG5jb25zdCBQcmV2aWV3UGFuZUNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIGhlaWdodDogMTAwJTtcbiAgcG9pbnRlci1ldmVudHM6ICR7cHJvcHMgPT4gKHByb3BzLmJsb2NrRW50cnkgPyAnbm9uZScgOiAnYXV0bycpfTtcbiAgb3ZlcmZsb3cteTogJHtwcm9wcyA9PiAocHJvcHMub3ZlckZsb3cgPyAnYXV0bycgOiAnaGlkZGVuJyl9O1xuYDtcblxuY29uc3QgQ29udHJvbFBhbmVDb250YWluZXIgPSBzdHlsZWQoUHJldmlld1BhbmVDb250YWluZXIpYFxuICBwYWRkaW5nOiAwIDE2cHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xuYDtcblxuY29uc3QgVmlld0NvbnRyb2xzID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDEwcHg7XG4gIHJpZ2h0OiAxMHB4O1xuICB6LWluZGV4OiAke3pJbmRleC56SW5kZXgyOTl9O1xuYDtcblxuY29uc3QgRWRpdG9yQ29udGVudCA9ICh7XG4gIGkxOG5WaXNpYmxlLFxuICBwcmV2aWV3VmlzaWJsZSxcbiAgZWRpdG9yLFxuICBlZGl0b3JXaXRoRWRpdG9yLFxuICBlZGl0b3JXaXRoUHJldmlldyxcbn0pID0+IHtcbiAgaWYgKGkxOG5WaXNpYmxlKSB7XG4gICAgcmV0dXJuIGVkaXRvcldpdGhFZGl0b3I7XG4gIH0gZWxzZSBpZiAocHJldmlld1Zpc2libGUpIHtcbiAgICByZXR1cm4gZWRpdG9yV2l0aFByZXZpZXc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDxOb1ByZXZpZXdDb250YWluZXI+e2VkaXRvcn08L05vUHJldmlld0NvbnRhaW5lcj47XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGlzUHJldmlld0VuYWJsZWQoY29sbGVjdGlvbiwgZW50cnkpIHtcbiAgaWYgKGNvbGxlY3Rpb24uZ2V0KCd0eXBlJykgPT09IEZJTEVTKSB7XG4gICAgY29uc3QgZmlsZSA9IGdldEZpbGVGcm9tU2x1Zyhjb2xsZWN0aW9uLCBlbnRyeS5nZXQoJ3NsdWcnKSk7XG4gICAgY29uc3QgcHJldmlld0VuYWJsZWQgPSBmaWxlPy5nZXRJbihbJ2VkaXRvcicsICdwcmV2aWV3J10pO1xuICAgIGlmIChwcmV2aWV3RW5hYmxlZCAhPSBudWxsKSByZXR1cm4gcHJldmlld0VuYWJsZWQ7XG4gIH1cbiAgcmV0dXJuIGNvbGxlY3Rpb24uZ2V0SW4oWydlZGl0b3InLCAncHJldmlldyddLCB0cnVlKTtcbn1cblxuY2xhc3MgRWRpdG9ySW50ZXJmYWNlIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGUgPSB7XG4gICAgc2hvd0V2ZW50QmxvY2tlcjogZmFsc2UsXG4gICAgcHJldmlld1Zpc2libGU6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFBSRVZJRVdfVklTSUJMRSkgIT09ICdmYWxzZScsXG4gICAgc2Nyb2xsU3luY0VuYWJsZWQ6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFNDUk9MTF9TWU5DX0VOQUJMRUQpICE9PSAnZmFsc2UnLFxuICAgIGkxOG5WaXNpYmxlOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShJMThOX1ZJU0lCTEUpICE9PSAnZmFsc2UnLFxuICB9O1xuXG4gIGhhbmRsZVNwbGl0UGFuZURyYWdTdGFydCA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgc2hvd0V2ZW50QmxvY2tlcjogdHJ1ZSB9KTtcbiAgfTtcblxuICBoYW5kbGVTcGxpdFBhbmVEcmFnRmluaXNoZWQgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNob3dFdmVudEJsb2NrZXI6IGZhbHNlIH0pO1xuICB9O1xuXG4gIGhhbmRsZU9uUGVyc2lzdCA9IGFzeW5jIChvcHRzID0ge30pID0+IHtcbiAgICBjb25zdCB7IGNyZWF0ZU5ldyA9IGZhbHNlLCBkdXBsaWNhdGUgPSBmYWxzZSB9ID0gb3B0cztcbiAgICBhd2FpdCB0aGlzLmNvbnRyb2xQYW5lUmVmLnN3aXRjaFRvRGVmYXVsdExvY2FsZSgpO1xuICAgIHRoaXMuY29udHJvbFBhbmVSZWYudmFsaWRhdGUoKTtcbiAgICB0aGlzLnByb3BzLm9uUGVyc2lzdCh7IGNyZWF0ZU5ldywgZHVwbGljYXRlIH0pO1xuICB9O1xuXG4gIGhhbmRsZU9uUHVibGlzaCA9IGFzeW5jIChvcHRzID0ge30pID0+IHtcbiAgICBjb25zdCB7IGNyZWF0ZU5ldyA9IGZhbHNlLCBkdXBsaWNhdGUgPSBmYWxzZSB9ID0gb3B0cztcbiAgICBhd2FpdCB0aGlzLmNvbnRyb2xQYW5lUmVmLnN3aXRjaFRvRGVmYXVsdExvY2FsZSgpO1xuICAgIHRoaXMuY29udHJvbFBhbmVSZWYudmFsaWRhdGUoKTtcbiAgICB0aGlzLnByb3BzLm9uUHVibGlzaCh7IGNyZWF0ZU5ldywgZHVwbGljYXRlIH0pO1xuICB9O1xuXG4gIGhhbmRsZVRvZ2dsZVByZXZpZXcgPSAoKSA9PiB7XG4gICAgY29uc3QgbmV3UHJldmlld1Zpc2libGUgPSAhdGhpcy5zdGF0ZS5wcmV2aWV3VmlzaWJsZTtcbiAgICB0aGlzLnNldFN0YXRlKHsgcHJldmlld1Zpc2libGU6IG5ld1ByZXZpZXdWaXNpYmxlIH0pO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFBSRVZJRVdfVklTSUJMRSwgbmV3UHJldmlld1Zpc2libGUpO1xuICB9O1xuXG4gIGhhbmRsZVRvZ2dsZVNjcm9sbFN5bmMgPSAoKSA9PiB7XG4gICAgY29uc3QgbmV3U2Nyb2xsU3luY0VuYWJsZWQgPSAhdGhpcy5zdGF0ZS5zY3JvbGxTeW5jRW5hYmxlZDtcbiAgICB0aGlzLnNldFN0YXRlKHsgc2Nyb2xsU3luY0VuYWJsZWQ6IG5ld1Njcm9sbFN5bmNFbmFibGVkIH0pO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFNDUk9MTF9TWU5DX0VOQUJMRUQsIG5ld1Njcm9sbFN5bmNFbmFibGVkKTtcbiAgfTtcblxuICBoYW5kbGVUb2dnbGVJMThuID0gKCkgPT4ge1xuICAgIGNvbnN0IG5ld0kxOG5WaXNpYmxlID0gIXRoaXMuc3RhdGUuaTE4blZpc2libGU7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGkxOG5WaXNpYmxlOiBuZXdJMThuVmlzaWJsZSB9KTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShJMThOX1ZJU0lCTEUsIG5ld0kxOG5WaXNpYmxlKTtcbiAgfTtcblxuICBoYW5kbGVMZWZ0UGFuZWxMb2NhbGVDaGFuZ2UgPSBsb2NhbGUgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBsZWZ0UGFuZWxMb2NhbGU6IGxvY2FsZSB9KTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgY29sbGVjdGlvbixcbiAgICAgIGVudHJ5LFxuICAgICAgZmllbGRzLFxuICAgICAgZmllbGRzTWV0YURhdGEsXG4gICAgICBmaWVsZHNFcnJvcnMsXG4gICAgICBvbkNoYW5nZSxcbiAgICAgIHNob3dEZWxldGUsXG4gICAgICBvbkRlbGV0ZSxcbiAgICAgIG9uRGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzLFxuICAgICAgb25DaGFuZ2VTdGF0dXMsXG4gICAgICBvblB1Ymxpc2gsXG4gICAgICB1blB1Ymxpc2gsXG4gICAgICBvbkR1cGxpY2F0ZSxcbiAgICAgIG9uVmFsaWRhdGUsXG4gICAgICB1c2VyLFxuICAgICAgaGFzQ2hhbmdlZCxcbiAgICAgIGRpc3BsYXlVcmwsXG4gICAgICBoYXNXb3JrZmxvdyxcbiAgICAgIHVzZU9wZW5BdXRob3JpbmcsXG4gICAgICBoYXNVbnB1Ymxpc2hlZENoYW5nZXMsXG4gICAgICBpc05ld0VudHJ5LFxuICAgICAgaXNNb2RpZmljYXRpb24sXG4gICAgICBjdXJyZW50U3RhdHVzLFxuICAgICAgb25Mb2dvdXRDbGljayxcbiAgICAgIGxvYWREZXBsb3lQcmV2aWV3LFxuICAgICAgZGVwbG95UHJldmlldyxcbiAgICAgIGRyYWZ0S2V5LFxuICAgICAgZWRpdG9yQmFja0xpbmssXG4gICAgICB0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgeyBzY3JvbGxTeW5jRW5hYmxlZCwgc2hvd0V2ZW50QmxvY2tlciB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IHByZXZpZXdFbmFibGVkID0gaXNQcmV2aWV3RW5hYmxlZChjb2xsZWN0aW9uLCBlbnRyeSk7XG5cbiAgICBjb25zdCBjb2xsZWN0aW9uSTE4bkVuYWJsZWQgPSBoYXNJMThuKGNvbGxlY3Rpb24pO1xuICAgIGNvbnN0IHsgbG9jYWxlcywgZGVmYXVsdExvY2FsZSB9ID0gZ2V0STE4bkluZm8odGhpcy5wcm9wcy5jb2xsZWN0aW9uKTtcbiAgICBjb25zdCBlZGl0b3JQcm9wcyA9IHtcbiAgICAgIGNvbGxlY3Rpb24sXG4gICAgICBlbnRyeSxcbiAgICAgIGZpZWxkcyxcbiAgICAgIGZpZWxkc01ldGFEYXRhLFxuICAgICAgZmllbGRzRXJyb3JzLFxuICAgICAgb25DaGFuZ2UsXG4gICAgICBvblZhbGlkYXRlLFxuICAgIH07XG5cbiAgICBjb25zdCBsZWZ0UGFuZWxMb2NhbGUgPSB0aGlzLnN0YXRlLmxlZnRQYW5lbExvY2FsZSB8fCBsb2NhbGVzPy5bMF07XG4gICAgY29uc3QgZWRpdG9yID0gKFxuICAgICAgPENvbnRyb2xQYW5lQ29udGFpbmVyIG92ZXJGbG93IGJsb2NrRW50cnk9e3Nob3dFdmVudEJsb2NrZXJ9PlxuICAgICAgICA8RWRpdG9yQ29udHJvbFBhbmVcbiAgICAgICAgICB7Li4uZWRpdG9yUHJvcHN9XG4gICAgICAgICAgcmVmPXtjID0+ICh0aGlzLmNvbnRyb2xQYW5lUmVmID0gYyl9XG4gICAgICAgICAgbG9jYWxlPXtsZWZ0UGFuZWxMb2NhbGV9XG4gICAgICAgICAgdD17dH1cbiAgICAgICAgICBvbkxvY2FsZUNoYW5nZT17dGhpcy5oYW5kbGVMZWZ0UGFuZWxMb2NhbGVDaGFuZ2V9XG4gICAgICAgIC8+XG4gICAgICA8L0NvbnRyb2xQYW5lQ29udGFpbmVyPlxuICAgICk7XG5cbiAgICBjb25zdCBlZGl0b3IyID0gKFxuICAgICAgPENvbnRyb2xQYW5lQ29udGFpbmVyIG92ZXJGbG93PXshdGhpcy5zdGF0ZS5zY3JvbGxTeW5jRW5hYmxlZH0gYmxvY2tFbnRyeT17c2hvd0V2ZW50QmxvY2tlcn0+XG4gICAgICAgIDxFZGl0b3JDb250cm9sUGFuZSB7Li4uZWRpdG9yUHJvcHN9IGxvY2FsZT17bG9jYWxlcz8uWzFdfSB0PXt0fSAvPlxuICAgICAgPC9Db250cm9sUGFuZUNvbnRhaW5lcj5cbiAgICApO1xuXG4gICAgY29uc3QgcHJldmlld0VudHJ5ID0gY29sbGVjdGlvbkkxOG5FbmFibGVkXG4gICAgICA/IGdldFByZXZpZXdFbnRyeShlbnRyeSwgbGVmdFBhbmVsTG9jYWxlLCBkZWZhdWx0TG9jYWxlKVxuICAgICAgOiBlbnRyeTtcblxuICAgIGNvbnN0IGVkaXRvcldpdGhQcmV2aWV3ID0gKFxuICAgICAgPFNjcm9sbFN5bmMgZW5hYmxlZD17dGhpcy5zdGF0ZS5zY3JvbGxTeW5jRW5hYmxlZH0+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPFJlYWN0U3BsaXRQYW5lR2xvYmFsU3R5bGVzIC8+XG4gICAgICAgICAgPFN0eWxlZFNwbGl0UGFuZVxuICAgICAgICAgICAgbWF4U2l6ZT17LTEwMH1cbiAgICAgICAgICAgIGRlZmF1bHRTaXplPXtwYXJzZUludChsb2NhbFN0b3JhZ2UuZ2V0SXRlbShTUExJVF9QQU5FX1BPU0lUSU9OKSwgMTApIHx8ICc1MCUnfVxuICAgICAgICAgICAgb25DaGFuZ2U9e3NpemUgPT4gbG9jYWxTdG9yYWdlLnNldEl0ZW0oU1BMSVRfUEFORV9QT1NJVElPTiwgc2l6ZSl9XG4gICAgICAgICAgICBvbkRyYWdTdGFydGVkPXt0aGlzLmhhbmRsZVNwbGl0UGFuZURyYWdTdGFydH1cbiAgICAgICAgICAgIG9uRHJhZ0ZpbmlzaGVkPXt0aGlzLmhhbmRsZVNwbGl0UGFuZURyYWdGaW5pc2hlZH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8U2Nyb2xsU3luY1BhbmU+e2VkaXRvcn08L1Njcm9sbFN5bmNQYW5lPlxuICAgICAgICAgICAgPFByZXZpZXdQYW5lQ29udGFpbmVyIGJsb2NrRW50cnk9e3Nob3dFdmVudEJsb2NrZXJ9PlxuICAgICAgICAgICAgICA8RWRpdG9yUHJldmlld1BhbmVcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufVxuICAgICAgICAgICAgICAgIGVudHJ5PXtwcmV2aWV3RW50cnl9XG4gICAgICAgICAgICAgICAgZmllbGRzPXtmaWVsZHN9XG4gICAgICAgICAgICAgICAgZmllbGRzTWV0YURhdGE9e2ZpZWxkc01ldGFEYXRhfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9QcmV2aWV3UGFuZUNvbnRhaW5lcj5cbiAgICAgICAgICA8L1N0eWxlZFNwbGl0UGFuZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L1Njcm9sbFN5bmM+XG4gICAgKTtcblxuICAgIGNvbnN0IGVkaXRvcldpdGhFZGl0b3IgPSAoXG4gICAgICA8U2Nyb2xsU3luYyBlbmFibGVkPXt0aGlzLnN0YXRlLnNjcm9sbFN5bmNFbmFibGVkfT5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8U3R5bGVkU3BsaXRQYW5lXG4gICAgICAgICAgICBtYXhTaXplPXstMTAwfVxuICAgICAgICAgICAgZGVmYXVsdFNpemU9e3BhcnNlSW50KGxvY2FsU3RvcmFnZS5nZXRJdGVtKFNQTElUX1BBTkVfUE9TSVRJT04pLCAxMCkgfHwgJzUwJSd9XG4gICAgICAgICAgICBvbkNoYW5nZT17c2l6ZSA9PiBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShTUExJVF9QQU5FX1BPU0lUSU9OLCBzaXplKX1cbiAgICAgICAgICAgIG9uRHJhZ1N0YXJ0ZWQ9e3RoaXMuaGFuZGxlU3BsaXRQYW5lRHJhZ1N0YXJ0fVxuICAgICAgICAgICAgb25EcmFnRmluaXNoZWQ9e3RoaXMuaGFuZGxlU3BsaXRQYW5lRHJhZ0ZpbmlzaGVkfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxTY3JvbGxTeW5jUGFuZT57ZWRpdG9yfTwvU2Nyb2xsU3luY1BhbmU+XG4gICAgICAgICAgICA8U2Nyb2xsU3luY1BhbmU+e2VkaXRvcjJ9PC9TY3JvbGxTeW5jUGFuZT5cbiAgICAgICAgICA8L1N0eWxlZFNwbGl0UGFuZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L1Njcm9sbFN5bmM+XG4gICAgKTtcblxuICAgIGNvbnN0IGkxOG5WaXNpYmxlID0gY29sbGVjdGlvbkkxOG5FbmFibGVkICYmIHRoaXMuc3RhdGUuaTE4blZpc2libGU7XG4gICAgY29uc3QgcHJldmlld1Zpc2libGUgPSBwcmV2aWV3RW5hYmxlZCAmJiB0aGlzLnN0YXRlLnByZXZpZXdWaXNpYmxlO1xuICAgIGNvbnN0IHNjcm9sbFN5bmNWaXNpYmxlID0gaTE4blZpc2libGUgfHwgcHJldmlld1Zpc2libGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEVkaXRvckNvbnRhaW5lcj5cbiAgICAgICAgPEVkaXRvclRvb2xiYXJcbiAgICAgICAgICBpc1BlcnNpc3Rpbmc9e2VudHJ5LmdldCgnaXNQZXJzaXN0aW5nJyl9XG4gICAgICAgICAgaXNQdWJsaXNoaW5nPXtlbnRyeS5nZXQoJ2lzUHVibGlzaGluZycpfVxuICAgICAgICAgIGlzVXBkYXRpbmdTdGF0dXM9e2VudHJ5LmdldCgnaXNVcGRhdGluZ1N0YXR1cycpfVxuICAgICAgICAgIGlzRGVsZXRpbmc9e2VudHJ5LmdldCgnaXNEZWxldGluZycpfVxuICAgICAgICAgIG9uUGVyc2lzdD17dGhpcy5oYW5kbGVPblBlcnNpc3R9XG4gICAgICAgICAgb25QZXJzaXN0QW5kTmV3PXsoKSA9PiB0aGlzLmhhbmRsZU9uUGVyc2lzdCh7IGNyZWF0ZU5ldzogdHJ1ZSB9KX1cbiAgICAgICAgICBvblBlcnNpc3RBbmREdXBsaWNhdGU9eygpID0+IHRoaXMuaGFuZGxlT25QZXJzaXN0KHsgY3JlYXRlTmV3OiB0cnVlLCBkdXBsaWNhdGU6IHRydWUgfSl9XG4gICAgICAgICAgb25EZWxldGU9e29uRGVsZXRlfVxuICAgICAgICAgIG9uRGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzPXtvbkRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlc31cbiAgICAgICAgICBvbkNoYW5nZVN0YXR1cz17b25DaGFuZ2VTdGF0dXN9XG4gICAgICAgICAgc2hvd0RlbGV0ZT17c2hvd0RlbGV0ZX1cbiAgICAgICAgICBvblB1Ymxpc2g9e29uUHVibGlzaH1cbiAgICAgICAgICB1blB1Ymxpc2g9e3VuUHVibGlzaH1cbiAgICAgICAgICBvbkR1cGxpY2F0ZT17b25EdXBsaWNhdGV9XG4gICAgICAgICAgb25QdWJsaXNoQW5kTmV3PXsoKSA9PiB0aGlzLmhhbmRsZU9uUHVibGlzaCh7IGNyZWF0ZU5ldzogdHJ1ZSB9KX1cbiAgICAgICAgICBvblB1Ymxpc2hBbmREdXBsaWNhdGU9eygpID0+IHRoaXMuaGFuZGxlT25QdWJsaXNoKHsgY3JlYXRlTmV3OiB0cnVlLCBkdXBsaWNhdGU6IHRydWUgfSl9XG4gICAgICAgICAgdXNlcj17dXNlcn1cbiAgICAgICAgICBoYXNDaGFuZ2VkPXtoYXNDaGFuZ2VkfVxuICAgICAgICAgIGRpc3BsYXlVcmw9e2Rpc3BsYXlVcmx9XG4gICAgICAgICAgY29sbGVjdGlvbj17Y29sbGVjdGlvbn1cbiAgICAgICAgICBoYXNXb3JrZmxvdz17aGFzV29ya2Zsb3d9XG4gICAgICAgICAgdXNlT3BlbkF1dGhvcmluZz17dXNlT3BlbkF1dGhvcmluZ31cbiAgICAgICAgICBoYXNVbnB1Ymxpc2hlZENoYW5nZXM9e2hhc1VucHVibGlzaGVkQ2hhbmdlc31cbiAgICAgICAgICBpc05ld0VudHJ5PXtpc05ld0VudHJ5fVxuICAgICAgICAgIGlzTW9kaWZpY2F0aW9uPXtpc01vZGlmaWNhdGlvbn1cbiAgICAgICAgICBjdXJyZW50U3RhdHVzPXtjdXJyZW50U3RhdHVzfVxuICAgICAgICAgIG9uTG9nb3V0Q2xpY2s9e29uTG9nb3V0Q2xpY2t9XG4gICAgICAgICAgbG9hZERlcGxveVByZXZpZXc9e2xvYWREZXBsb3lQcmV2aWV3fVxuICAgICAgICAgIGRlcGxveVByZXZpZXc9e2RlcGxveVByZXZpZXd9XG4gICAgICAgICAgZWRpdG9yQmFja0xpbms9e2VkaXRvckJhY2tMaW5rfVxuICAgICAgICAvPlxuICAgICAgICA8RWRpdG9yIGtleT17ZHJhZnRLZXl9PlxuICAgICAgICAgIDxWaWV3Q29udHJvbHM+XG4gICAgICAgICAgICB7Y29sbGVjdGlvbkkxOG5FbmFibGVkICYmIChcbiAgICAgICAgICAgICAgPEVkaXRvclRvZ2dsZVxuICAgICAgICAgICAgICAgIGlzQWN0aXZlPXtpMThuVmlzaWJsZX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZVRvZ2dsZUkxOG59XG4gICAgICAgICAgICAgICAgc2l6ZT1cImxhcmdlXCJcbiAgICAgICAgICAgICAgICB0eXBlPVwicGFnZVwiXG4gICAgICAgICAgICAgICAgdGl0bGU9XCJUb2dnbGUgaTE4blwiXG4gICAgICAgICAgICAgICAgbWFyZ2luVG9wPVwiNzBweFwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAge3ByZXZpZXdFbmFibGVkICYmIChcbiAgICAgICAgICAgICAgPEVkaXRvclRvZ2dsZVxuICAgICAgICAgICAgICAgIGlzQWN0aXZlPXtwcmV2aWV3VmlzaWJsZX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZVRvZ2dsZVByZXZpZXd9XG4gICAgICAgICAgICAgICAgc2l6ZT1cImxhcmdlXCJcbiAgICAgICAgICAgICAgICB0eXBlPVwiZXllXCJcbiAgICAgICAgICAgICAgICB0aXRsZT1cIlRvZ2dsZSBwcmV2aWV3XCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICB7c2Nyb2xsU3luY1Zpc2libGUgJiYgKFxuICAgICAgICAgICAgICA8RWRpdG9yVG9nZ2xlXG4gICAgICAgICAgICAgICAgaXNBY3RpdmU9e3Njcm9sbFN5bmNFbmFibGVkfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlVG9nZ2xlU2Nyb2xsU3luY31cbiAgICAgICAgICAgICAgICBzaXplPVwibGFyZ2VcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJzY3JvbGxcIlxuICAgICAgICAgICAgICAgIHRpdGxlPVwiU3luYyBzY3JvbGxpbmdcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L1ZpZXdDb250cm9scz5cbiAgICAgICAgICA8RWRpdG9yQ29udGVudFxuICAgICAgICAgICAgaTE4blZpc2libGU9e2kxOG5WaXNpYmxlfVxuICAgICAgICAgICAgcHJldmlld1Zpc2libGU9e3ByZXZpZXdWaXNpYmxlfVxuICAgICAgICAgICAgZWRpdG9yPXtlZGl0b3J9XG4gICAgICAgICAgICBlZGl0b3JXaXRoRWRpdG9yPXtlZGl0b3JXaXRoRWRpdG9yfVxuICAgICAgICAgICAgZWRpdG9yV2l0aFByZXZpZXc9e2VkaXRvcldpdGhQcmV2aWV3fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvRWRpdG9yPlxuICAgICAgPC9FZGl0b3JDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5FZGl0b3JJbnRlcmZhY2UucHJvcFR5cGVzID0ge1xuICBjb2xsZWN0aW9uOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gIGVudHJ5OiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gIGZpZWxkczogSW1tdXRhYmxlUHJvcFR5cGVzLmxpc3QuaXNSZXF1aXJlZCxcbiAgZmllbGRzTWV0YURhdGE6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgZmllbGRzRXJyb3JzOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvblZhbGlkYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvblBlcnNpc3Q6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHNob3dEZWxldGU6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIG9uRGVsZXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvbkRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25QdWJsaXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB1blB1Ymxpc2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uRHVwbGljYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvbkNoYW5nZVN0YXR1czogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgdXNlcjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICBoYXNDaGFuZ2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgZGlzcGxheVVybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgaGFzV29ya2Zsb3c6IFByb3BUeXBlcy5ib29sLFxuICB1c2VPcGVuQXV0aG9yaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgaGFzVW5wdWJsaXNoZWRDaGFuZ2VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgaXNOZXdFbnRyeTogUHJvcFR5cGVzLmJvb2wsXG4gIGlzTW9kaWZpY2F0aW9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgY3VycmVudFN0YXR1czogUHJvcFR5cGVzLnN0cmluZyxcbiAgb25Mb2dvdXRDbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZGVwbG95UHJldmlldzogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcCxcbiAgbG9hZERlcGxveVByZXZpZXc6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGRyYWZ0S2V5OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBFZGl0b3JJbnRlcmZhY2U7XG4iXX0= */"));
const NoPreviewContainer = (0, _styledBase.default)("div", {
  target: "e1pxf6c42",
  label: "NoPreviewContainer"
})(styles.splitPane, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const EditorContainer = (0, _styledBase.default)("div", {
  target: "e1pxf6c43",
  label: "EditorContainer"
})("width:100%;min-width:800px;height:100%;position:absolute;top:0;left:0;overflow:hidden;padding-top:66px;background-color:", _netlifyCmsUiDefault.colors.background, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const Editor = (0, _styledBase.default)("div", {
  target: "e1pxf6c44",
  label: "Editor"
})(process.env.NODE_ENV === "production" ? {
  name: "1gs40ov",
  styles: "height:100%;margin:0 auto;position:relative;"
} : {
  name: "1gs40ov",
  styles: "height:100%;margin:0 auto;position:relative;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const PreviewPaneContainer = (0, _styledBase.default)("div", {
  target: "e1pxf6c45",
  label: "PreviewPaneContainer"
})("height:100%;pointer-events:", props => props.blockEntry ? 'none' : 'auto', ";overflow-y:", props => props.overFlow ? 'auto' : 'hidden', ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ControlPaneContainer = ( /*#__PURE__*/0, _styledBase.default)(PreviewPaneContainer, {
  target: "e1pxf6c46",
  label: "ControlPaneContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "pjxpm9",
  styles: "padding:0 16px;position:relative;overflow-x:hidden;"
} : {
  name: "pjxpm9",
  styles: "padding:0 16px;position:relative;overflow-x:hidden;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ViewControls = (0, _styledBase.default)("div", {
  target: "e1pxf6c47",
  label: "ViewControls"
})("position:absolute;top:10px;right:10px;z-index:", _netlifyCmsUiDefault.zIndex.zIndex299, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

const EditorContent = ({
  i18nVisible,
  previewVisible,
  editor,
  editorWithEditor,
  editorWithPreview
}) => {
  if (i18nVisible) {
    return editorWithEditor;
  } else if (previewVisible) {
    return editorWithPreview;
  } else {
    return (0, _core.jsx)(NoPreviewContainer, null, editor);
  }
};

function isPreviewEnabled(collection, entry) {
  if (collection.get('type') === _collectionTypes.FILES) {
    const file = (0, _collections.getFileFromSlug)(collection, entry.get('slug'));
    const previewEnabled = file === null || file === void 0 ? void 0 : file.getIn(['editor', 'preview']);
    if (previewEnabled != null) return previewEnabled;
  }

  return collection.getIn(['editor', 'preview'], true);
}

class EditorInterface extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      showEventBlocker: false,
      previewVisible: localStorage.getItem(PREVIEW_VISIBLE) !== 'false',
      scrollSyncEnabled: localStorage.getItem(SCROLL_SYNC_ENABLED) !== 'false',
      i18nVisible: localStorage.getItem(I18N_VISIBLE) !== 'false'
    });

    _defineProperty(this, "handleSplitPaneDragStart", () => {
      this.setState({
        showEventBlocker: true
      });
    });

    _defineProperty(this, "handleSplitPaneDragFinished", () => {
      this.setState({
        showEventBlocker: false
      });
    });

    _defineProperty(this, "handleOnPersist", async (opts = {}) => {
      const {
        createNew = false,
        duplicate = false
      } = opts;
      await this.controlPaneRef.switchToDefaultLocale();
      this.controlPaneRef.validate();
      this.props.onPersist({
        createNew,
        duplicate
      });
    });

    _defineProperty(this, "handleOnPublish", async (opts = {}) => {
      const {
        createNew = false,
        duplicate = false
      } = opts;
      await this.controlPaneRef.switchToDefaultLocale();
      this.controlPaneRef.validate();
      this.props.onPublish({
        createNew,
        duplicate
      });
    });

    _defineProperty(this, "handleTogglePreview", () => {
      const newPreviewVisible = !this.state.previewVisible;
      this.setState({
        previewVisible: newPreviewVisible
      });
      localStorage.setItem(PREVIEW_VISIBLE, newPreviewVisible);
    });

    _defineProperty(this, "handleToggleScrollSync", () => {
      const newScrollSyncEnabled = !this.state.scrollSyncEnabled;
      this.setState({
        scrollSyncEnabled: newScrollSyncEnabled
      });
      localStorage.setItem(SCROLL_SYNC_ENABLED, newScrollSyncEnabled);
    });

    _defineProperty(this, "handleToggleI18n", () => {
      const newI18nVisible = !this.state.i18nVisible;
      this.setState({
        i18nVisible: newI18nVisible
      });
      localStorage.setItem(I18N_VISIBLE, newI18nVisible);
    });

    _defineProperty(this, "handleLeftPanelLocaleChange", locale => {
      this.setState({
        leftPanelLocale: locale
      });
    });
  }

  render() {
    const {
      collection,
      entry,
      fields,
      fieldsMetaData,
      fieldsErrors,
      onChange,
      showDelete,
      onDelete,
      onDeleteUnpublishedChanges,
      onChangeStatus,
      onPublish,
      unPublish,
      onDuplicate,
      onValidate,
      user,
      hasChanged,
      displayUrl,
      hasWorkflow,
      useOpenAuthoring,
      hasUnpublishedChanges,
      isNewEntry,
      isModification,
      currentStatus,
      onLogoutClick,
      loadDeployPreview,
      deployPreview,
      draftKey,
      editorBackLink,
      t
    } = this.props;
    const {
      scrollSyncEnabled,
      showEventBlocker
    } = this.state;
    const previewEnabled = isPreviewEnabled(collection, entry);
    const collectionI18nEnabled = (0, _i18n.hasI18n)(collection);
    const {
      locales,
      defaultLocale
    } = (0, _i18n.getI18nInfo)(this.props.collection);
    const editorProps = {
      collection,
      entry,
      fields,
      fieldsMetaData,
      fieldsErrors,
      onChange,
      onValidate
    };
    const leftPanelLocale = this.state.leftPanelLocale || (locales === null || locales === void 0 ? void 0 : locales[0]);
    const editor = (0, _core.jsx)(ControlPaneContainer, {
      overFlow: true,
      blockEntry: showEventBlocker
    }, (0, _core.jsx)(_EditorControlPane.default, _extends({}, editorProps, {
      ref: c => this.controlPaneRef = c,
      locale: leftPanelLocale,
      t: t,
      onLocaleChange: this.handleLeftPanelLocaleChange
    })));
    const editor2 = (0, _core.jsx)(ControlPaneContainer, {
      overFlow: !this.state.scrollSyncEnabled,
      blockEntry: showEventBlocker
    }, (0, _core.jsx)(_EditorControlPane.default, _extends({}, editorProps, {
      locale: locales === null || locales === void 0 ? void 0 : locales[1],
      t: t
    })));
    const previewEntry = collectionI18nEnabled ? (0, _i18n.getPreviewEntry)(entry, leftPanelLocale, defaultLocale) : entry;
    const editorWithPreview = (0, _core.jsx)(_reactScrollSync.ScrollSync, {
      enabled: this.state.scrollSyncEnabled
    }, (0, _core.jsx)("div", null, (0, _core.jsx)(ReactSplitPaneGlobalStyles, null), (0, _core.jsx)(StyledSplitPane, {
      maxSize: -100,
      defaultSize: parseInt(localStorage.getItem(SPLIT_PANE_POSITION), 10) || '50%',
      onChange: size => localStorage.setItem(SPLIT_PANE_POSITION, size),
      onDragStarted: this.handleSplitPaneDragStart,
      onDragFinished: this.handleSplitPaneDragFinished
    }, (0, _core.jsx)(_reactScrollSync.ScrollSyncPane, null, editor), (0, _core.jsx)(PreviewPaneContainer, {
      blockEntry: showEventBlocker
    }, (0, _core.jsx)(_EditorPreviewPane.default, {
      collection: collection,
      entry: previewEntry,
      fields: fields,
      fieldsMetaData: fieldsMetaData
    })))));
    const editorWithEditor = (0, _core.jsx)(_reactScrollSync.ScrollSync, {
      enabled: this.state.scrollSyncEnabled
    }, (0, _core.jsx)("div", null, (0, _core.jsx)(StyledSplitPane, {
      maxSize: -100,
      defaultSize: parseInt(localStorage.getItem(SPLIT_PANE_POSITION), 10) || '50%',
      onChange: size => localStorage.setItem(SPLIT_PANE_POSITION, size),
      onDragStarted: this.handleSplitPaneDragStart,
      onDragFinished: this.handleSplitPaneDragFinished
    }, (0, _core.jsx)(_reactScrollSync.ScrollSyncPane, null, editor), (0, _core.jsx)(_reactScrollSync.ScrollSyncPane, null, editor2))));
    const i18nVisible = collectionI18nEnabled && this.state.i18nVisible;
    const previewVisible = previewEnabled && this.state.previewVisible;
    const scrollSyncVisible = i18nVisible || previewVisible;
    return (0, _core.jsx)(EditorContainer, null, (0, _core.jsx)(_EditorToolbar.default, {
      isPersisting: entry.get('isPersisting'),
      isPublishing: entry.get('isPublishing'),
      isUpdatingStatus: entry.get('isUpdatingStatus'),
      isDeleting: entry.get('isDeleting'),
      onPersist: this.handleOnPersist,
      onPersistAndNew: () => this.handleOnPersist({
        createNew: true
      }),
      onPersistAndDuplicate: () => this.handleOnPersist({
        createNew: true,
        duplicate: true
      }),
      onDelete: onDelete,
      onDeleteUnpublishedChanges: onDeleteUnpublishedChanges,
      onChangeStatus: onChangeStatus,
      showDelete: showDelete,
      onPublish: onPublish,
      unPublish: unPublish,
      onDuplicate: onDuplicate,
      onPublishAndNew: () => this.handleOnPublish({
        createNew: true
      }),
      onPublishAndDuplicate: () => this.handleOnPublish({
        createNew: true,
        duplicate: true
      }),
      user: user,
      hasChanged: hasChanged,
      displayUrl: displayUrl,
      collection: collection,
      hasWorkflow: hasWorkflow,
      useOpenAuthoring: useOpenAuthoring,
      hasUnpublishedChanges: hasUnpublishedChanges,
      isNewEntry: isNewEntry,
      isModification: isModification,
      currentStatus: currentStatus,
      onLogoutClick: onLogoutClick,
      loadDeployPreview: loadDeployPreview,
      deployPreview: deployPreview,
      editorBackLink: editorBackLink
    }), (0, _core.jsx)(Editor, {
      key: draftKey
    }, (0, _core.jsx)(ViewControls, null, collectionI18nEnabled && (0, _core.jsx)(EditorToggle, {
      isActive: i18nVisible,
      onClick: this.handleToggleI18n,
      size: "large",
      type: "page",
      title: "Toggle i18n",
      marginTop: "70px"
    }), previewEnabled && (0, _core.jsx)(EditorToggle, {
      isActive: previewVisible,
      onClick: this.handleTogglePreview,
      size: "large",
      type: "eye",
      title: "Toggle preview"
    }), scrollSyncVisible && (0, _core.jsx)(EditorToggle, {
      isActive: scrollSyncEnabled,
      onClick: this.handleToggleScrollSync,
      size: "large",
      type: "scroll",
      title: "Sync scrolling"
    })), (0, _core.jsx)(EditorContent, {
      i18nVisible: i18nVisible,
      previewVisible: previewVisible,
      editor: editor,
      editorWithEditor: editorWithEditor,
      editorWithPreview: editorWithPreview
    })));
  }

}

EditorInterface.propTypes = {
  collection: _reactImmutableProptypes.default.map.isRequired,
  entry: _reactImmutableProptypes.default.map.isRequired,
  fields: _reactImmutableProptypes.default.list.isRequired,
  fieldsMetaData: _reactImmutableProptypes.default.map.isRequired,
  fieldsErrors: _reactImmutableProptypes.default.map.isRequired,
  onChange: _propTypes.default.func.isRequired,
  onValidate: _propTypes.default.func.isRequired,
  onPersist: _propTypes.default.func.isRequired,
  showDelete: _propTypes.default.bool.isRequired,
  onDelete: _propTypes.default.func.isRequired,
  onDeleteUnpublishedChanges: _propTypes.default.func.isRequired,
  onPublish: _propTypes.default.func.isRequired,
  unPublish: _propTypes.default.func.isRequired,
  onDuplicate: _propTypes.default.func.isRequired,
  onChangeStatus: _propTypes.default.func.isRequired,
  user: _reactImmutableProptypes.default.map.isRequired,
  hasChanged: _propTypes.default.bool,
  displayUrl: _propTypes.default.string,
  hasWorkflow: _propTypes.default.bool,
  useOpenAuthoring: _propTypes.default.bool,
  hasUnpublishedChanges: _propTypes.default.bool,
  isNewEntry: _propTypes.default.bool,
  isModification: _propTypes.default.bool,
  currentStatus: _propTypes.default.string,
  onLogoutClick: _propTypes.default.func.isRequired,
  deployPreview: _reactImmutableProptypes.default.map,
  loadDeployPreview: _propTypes.default.func.isRequired,
  draftKey: _propTypes.default.string.isRequired,
  t: _propTypes.default.func.isRequired
};
var _default = EditorInterface;
exports.default = _default;