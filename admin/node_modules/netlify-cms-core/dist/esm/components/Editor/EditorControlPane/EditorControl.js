"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ControlHint = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _uniqueId2 = _interopRequireDefault(require("lodash/uniqueId"));

var _partial2 = _interopRequireDefault(require("lodash/partial"));

var _react = _interopRequireDefault(require("react"));

var _redux = require("redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _reactPolyglot = require("react-polyglot");

var _core = require("@emotion/core");

var _reactRedux = require("react-redux");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _registry = require("../../../lib/registry");

var _entries = require("../../../actions/entries");

var _media = require("../../../actions/media");

var _medias = require("../../../reducers/medias");

var _search = require("../../../actions/search");

var _mediaLibrary = require("../../../actions/mediaLibrary");

var _Widget = _interopRequireDefault(require("./Widget"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

/**
 * This is a necessary bridge as we are still passing classnames to widgets
 * for styling. Once that changes we can stop storing raw style strings like
 * this.
 */
const styleStrings = {
  widget: `
    display: block;
    width: 100%;
    padding: ${_netlifyCmsUiDefault.lengths.inputPadding};
    margin: 0;
    border: ${_netlifyCmsUiDefault.borders.textField};
    border-radius: ${_netlifyCmsUiDefault.lengths.borderRadius};
    border-top-left-radius: 0;
    outline: 0;
    box-shadow: none;
    background-color: ${_netlifyCmsUiDefault.colors.inputBackground};
    color: #444a57;
    transition: border-color ${_netlifyCmsUiDefault.transitions.main};
    position: relative;
    font-size: 15px;
    line-height: 1.5;

    select& {
      text-indent: 14px;
      height: 58px;
    }
  `,
  widgetActive: `
    border-color: ${_netlifyCmsUiDefault.colors.active};
  `,
  widgetError: `
    border-color: ${_netlifyCmsUiDefault.colors.errorText};
  `,
  disabled: `
    pointer-events: none;
    opacity: 0.5;
    background: #ccc;
  `,
  hidden: `
    visibility: hidden;
  `
};
const ControlContainer = (0, _styledBase.default)("div", {
  target: "ei073ck0",
  label: "ControlContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "gpgisz",
  styles: "margin-top:16px;&:first-of-type{margin-top:36px;}"
} : {
  name: "gpgisz",
  styles: "margin-top:16px;&:first-of-type{margin-top:36px;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ControlErrorsList = (0, _styledBase.default)("ul", {
  target: "ei073ck1",
  label: "ControlErrorsList"
})("list-style-type:none;font-size:12px;color:", _netlifyCmsUiDefault.colors.errorText, ";margin-bottom:5px;text-align:right;text-transform:uppercase;position:relative;font-weight:600;top:20px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ControlHint = (0, _styledBase.default)("p", {
  target: "ei073ck2",
  label: "ControlHint"
})("margin-bottom:0;padding:3px 0;font-size:12px;color:", props => props.error ? _netlifyCmsUiDefault.colors.errorText : props.active ? _netlifyCmsUiDefault.colors.active : _netlifyCmsUiDefault.colors.controlLabel, ";transition:color ", _netlifyCmsUiDefault.transitions.main, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.ControlHint = ControlHint;

const LabelComponent = ({
  field,
  isActive,
  hasErrors,
  uniqueFieldId,
  isFieldOptional,
  t
}) => {
  const label = `${field.get('label', field.get('name'))}`;
  const labelComponent = (0, _core.jsx)(_netlifyCmsUiDefault.FieldLabel, {
    isActive: isActive,
    hasErrors: hasErrors,
    htmlFor: uniqueFieldId
  }, label, " ", `${isFieldOptional ? ` (${t('editor.editorControl.field.optional')})` : ''}`);
  return labelComponent;
};

class EditorControl extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      activeLabel: false
    });

    _defineProperty(this, "uniqueFieldId", (0, _uniqueId2.default)(`${this.props.field.get('name')}-field-`));

    _defineProperty(this, "isAncestorOfFieldError", () => {
      const {
        fieldsErrors
      } = this.props;

      if (fieldsErrors && fieldsErrors.size > 0) {
        return Object.values(fieldsErrors.toJS()).some(arr => arr.some(err => err.parentIds && err.parentIds.includes(this.uniqueFieldId)));
      }

      return false;
    });
  }

  render() {
    const {
      value,
      entry,
      collection,
      config,
      field,
      fieldsMetaData,
      fieldsErrors,
      mediaPaths,
      boundGetAsset,
      onChange,
      openMediaLibrary,
      clearMediaControl,
      removeMediaControl,
      addAsset,
      removeInsertedMedia,
      onValidate,
      processControlRef,
      controlRef,
      query,
      queryHits,
      isFetching,
      clearSearch,
      clearFieldErrors,
      loadEntry,
      className,
      isSelected,
      isEditorComponent,
      isNewEditorComponent,
      parentIds,
      t,
      validateMetaField,
      isDisabled,
      isHidden,
      isFieldDuplicate,
      isFieldHidden
    } = this.props;
    const widgetName = field.get('widget');
    const widget = (0, _registry.resolveWidget)(widgetName);
    const fieldName = field.get('name');
    const fieldHint = field.get('hint');
    const isFieldOptional = field.get('required') === false;
    const onValidateObject = onValidate;
    const metadata = fieldsMetaData && fieldsMetaData.get(fieldName);
    const errors = fieldsErrors && fieldsErrors.get(this.uniqueFieldId);
    const childErrors = this.isAncestorOfFieldError();
    const hasErrors = !!errors || childErrors;
    return (0, _core.jsx)(_core.ClassNames, null, ({
      css,
      cx
    }) => (0, _core.jsx)(ControlContainer, {
      className: className,
      css: css`
              ${isHidden && styleStrings.hidden};
            `
    }, widget.globalStyles && (0, _core.jsx)(_core.Global, {
      styles: /*#__PURE__*/(0, _core.css)(widget.globalStyles, ";label:EditorControl;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
    }), errors && (0, _core.jsx)(ControlErrorsList, null, errors.map(error => error.message && typeof error.message === 'string' && (0, _core.jsx)("li", {
      key: error.message.trim().replace(/[^a-z0-9]+/gi, '-')
    }, error.message))), (0, _core.jsx)(LabelComponent, {
      field: field,
      isActive: isSelected || this.state.styleActive,
      hasErrors: hasErrors,
      uniqueFieldId: this.uniqueFieldId,
      isFieldOptional: isFieldOptional,
      t: t
    }), (0, _core.jsx)(_Widget.default, {
      classNameWrapper: cx(css`
                  ${styleStrings.widget};
                `, {
        [css`
                    ${styleStrings.widgetActive};
                  `]: isSelected || this.state.styleActive
      }, {
        [css`
                    ${styleStrings.widgetError};
                  `]: hasErrors
      }, {
        [css`
                    ${styleStrings.disabled}
                  `]: isDisabled
      }),
      classNameWidget: css`
                ${styleStrings.widget};
              `,
      classNameWidgetActive: css`
                ${styleStrings.widgetActive};
              `,
      classNameLabel: css`
                ${styleStrings.label};
              `,
      classNameLabelActive: css`
                ${styleStrings.labelActive};
              `,
      controlComponent: widget.control,
      entry: entry,
      collection: collection,
      config: config,
      field: field,
      uniqueFieldId: this.uniqueFieldId,
      value: value,
      mediaPaths: mediaPaths,
      metadata: metadata,
      onChange: (newValue, newMetadata) => onChange(field, newValue, newMetadata),
      onValidate: onValidate && (0, _partial2.default)(onValidate, this.uniqueFieldId),
      onOpenMediaLibrary: openMediaLibrary,
      onClearMediaControl: clearMediaControl,
      onRemoveMediaControl: removeMediaControl,
      onRemoveInsertedMedia: removeInsertedMedia,
      onAddAsset: addAsset,
      getAsset: boundGetAsset,
      hasActiveStyle: isSelected || this.state.styleActive,
      setActiveStyle: () => this.setState({
        styleActive: true
      }),
      setInactiveStyle: () => this.setState({
        styleActive: false
      }),
      resolveWidget: _registry.resolveWidget,
      widget: widget,
      getEditorComponents: _registry.getEditorComponents,
      ref: processControlRef && (0, _partial2.default)(processControlRef, field),
      controlRef: controlRef,
      editorControl: ConnectedEditorControl,
      query: query,
      loadEntry: loadEntry,
      queryHits: queryHits,
      clearSearch: clearSearch,
      clearFieldErrors: clearFieldErrors,
      isFetching: isFetching,
      fieldsErrors: fieldsErrors,
      onValidateObject: onValidateObject,
      isEditorComponent: isEditorComponent,
      isNewEditorComponent: isNewEditorComponent,
      parentIds: parentIds,
      t: t,
      validateMetaField: validateMetaField,
      isDisabled: isDisabled,
      isFieldDuplicate: isFieldDuplicate,
      isFieldHidden: isFieldHidden
    }), fieldHint && (0, _core.jsx)(ControlHint, {
      active: isSelected || this.state.styleActive,
      error: hasErrors
    }, fieldHint)));
  }

}

_defineProperty(EditorControl, "propTypes", {
  value: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.object, _propTypes.default.string, _propTypes.default.bool]),
  field: _reactImmutableProptypes.default.map.isRequired,
  fieldsMetaData: _reactImmutableProptypes.default.map,
  fieldsErrors: _reactImmutableProptypes.default.map,
  mediaPaths: _reactImmutableProptypes.default.map.isRequired,
  boundGetAsset: _propTypes.default.func.isRequired,
  onChange: _propTypes.default.func.isRequired,
  openMediaLibrary: _propTypes.default.func.isRequired,
  addAsset: _propTypes.default.func.isRequired,
  removeInsertedMedia: _propTypes.default.func.isRequired,
  onValidate: _propTypes.default.func,
  processControlRef: _propTypes.default.func,
  controlRef: _propTypes.default.func,
  query: _propTypes.default.func.isRequired,
  queryHits: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.object]),
  isFetching: _propTypes.default.bool,
  clearSearch: _propTypes.default.func.isRequired,
  clearFieldErrors: _propTypes.default.func.isRequired,
  loadEntry: _propTypes.default.func.isRequired,
  t: _propTypes.default.func.isRequired,
  isEditorComponent: _propTypes.default.bool,
  isNewEditorComponent: _propTypes.default.bool,
  parentIds: _propTypes.default.arrayOf(_propTypes.default.string),
  entry: _reactImmutableProptypes.default.map.isRequired,
  collection: _reactImmutableProptypes.default.map.isRequired,
  isDisabled: _propTypes.default.bool,
  isHidden: _propTypes.default.bool,
  isFieldDuplicate: _propTypes.default.func,
  isFieldHidden: _propTypes.default.func
});

_defineProperty(EditorControl, "defaultProps", {
  parentIds: []
});

const mapStateToProps = state => {
  const {
    collections,
    entryDraft
  } = state;
  const entry = entryDraft.get('entry');
  const collection = collections.get(entryDraft.getIn(['entry', 'collection']));
  const isLoadingAsset = (0, _medias.selectIsLoadingAsset)(state.medias);

  const loadEntry = async (collectionName, slug) => {
    const targetCollection = collections.get(collectionName);

    if (targetCollection) {
      const loadedEntry = await (0, _entries.tryLoadEntry)(state, targetCollection, slug);
      return loadedEntry;
    } else {
      throw new Error(`Can't find collection '${collectionName}'`);
    }
  };

  return {
    mediaPaths: state.mediaLibrary.get('controlMedia'),
    isFetching: state.search.get('isFetching'),
    queryHits: state.search.get('queryHits'),
    config: state.config,
    entry,
    collection,
    isLoadingAsset,
    loadEntry,
    validateMetaField: (field, value, t) => (0, _entries.validateMetaField)(state, collection, field, value, t)
  };
};

const mapDispatchToProps = dispatch => {
  const creators = (0, _redux.bindActionCreators)({
    openMediaLibrary: _mediaLibrary.openMediaLibrary,
    clearMediaControl: _mediaLibrary.clearMediaControl,
    removeMediaControl: _mediaLibrary.removeMediaControl,
    removeInsertedMedia: _mediaLibrary.removeInsertedMedia,
    addAsset: _media.addAsset,
    query: _search.query,
    clearSearch: _search.clearSearch,
    clearFieldErrors: _entries.clearFieldErrors
  }, dispatch);
  return _objectSpread(_objectSpread({}, creators), {}, {
    boundGetAsset: (collection, entry) => (0, _media.boundGetAsset)(dispatch, collection, entry)
  });
};

const mergeProps = (stateProps, dispatchProps, ownProps) => {
  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, stateProps), dispatchProps), ownProps), {}, {
    boundGetAsset: dispatchProps.boundGetAsset(stateProps.collection, stateProps.entry)
  });
};

const ConnectedEditorControl = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps)((0, _reactPolyglot.translate)()(EditorControl));
var _default = ConnectedEditorControl;
exports.default = _default;